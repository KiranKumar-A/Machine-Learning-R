bad.months,
best.month,
worst.month)
m
rbind(
revenue.1000,
expenses.1000,
profit.1000,
profit.after.tax.1000,
profit.margin,
good.months,
bad.months,
best.month,
worst.month)
m <- rbind(
revenue.1000,
expenses.1000,
profit.1000,
profit.after.tax.1000,
profit.margin,
good.months,
bad.months,
best.month,
worst.month)
m
#Data
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
#Solution
# profit for each month
profit <- revenue - expenses
profit
# profit after tax for each month (the tax rate is 30%)
tax <- round(profit * 0.3, 2)
tax
profit.after.tax <- profit - tax
profit.after.tax
# profit margin for each month - equals to profit a after tax divided by revenue
profit.margin <- round(profit.after.tax/revenue, 2) *100
profit.margin
# good months - where the profit after tax was greater than the mean for the year
mean_pat <- mean(profit.after.tax)
mean_pat
good.months  <- profit.after.tax > mean_pat
good.months
# bad months - where the profit after tax was less than the mean for the year
bad.months  <- !good.months
bad.months
# the best month - where the profit after tax was max for the year
best.month <- profit.after.tax == max(profit.after.tax)
best.month
# the worst month - where the profit after tax was min for the year
worst.month <- profit.after.tax == min (profit.after.tax)
worst.month
# Units of thousands
revenue.1000 <- round(revenue/1000)
revenue.1000
expenses.1000 <- round(expenses/1000)
expenses.1000
profit.1000 <- round(profit/1000)
profit.1000
profit.after.tax.1000 <- round(profit.after.tax / 1000)
profit.after.tax.1000
# output
revenue.1000
expenses.1000
profit.1000
profit.after.tax.1000
profit.margin
good.months
bad.months
best.month
worst.month
# matrices
m <- rbind(
revenue.1000,
expenses.1000,
profit.1000,
profit.after.tax.1000,
profit.margin,
good.months,
bad.months,
best.month,
worst.month)
m
print("hello world")
3+2
sum(3,2)
3>2
3*2
8+1
x<-2
x
ls()
price <- c(100,200,NA)
price
install.packages('quantmod')
library("quantmod", lib.loc="~/R/win-library/3.4")
library(quantmod)
?quantmod
getSymbols('^INFY.NS', src = 'yahoo')
getSymbols('^INFY', src = 'yahoo')
getSymbols('^INFY', src = 'google')
getSymbols('INFY', src = 'google')
getSymbols('INFY.NS', src = 'google')
head(INFY)
getSymbols('NSE:INFY', src = 'google')
getSymbols('Infosys Ltd', src = 'google')
head(INFY)
getSymbols('Infosys Ltd.NS', src = 'google')
getSymbols('Infosys Ltd.NSE', src = 'google')
getSymbols('INFY.NS', src = 'yahoo')
getSymbols('INFY.NS', src = 'google')
getSymbols('INFY:NSE', src = 'google')
getSymbols('NSE:INFY', src = 'google')
getSymbols('SBIN.NS', src = 'google')
View(INFY)
View(`INFOSYS LTD`)
View(INFY)
?getSymbols
getSymbols('SBIN.NS', NSE, src = 'google')
getSymbols('SBIN.NS', env=NSE, src = 'google')
getSymbols('SBIN.NS', env=Nifty50, src = 'google')
getSymbols.google('INFY.NS')
getSymbols.google('INFY')
getSymbols.google('INFY', NSE)
?env
getSymbols('INFY.NS', src = 'yahoo' )
getSymbols('^INFY.NS', src = 'yahoo' )
getSymbols('SBIN.NS', src = 'yahoo' )
getSymbols("SBIN.NS", src = "yahoo" )
2+2
letters.factors <- as.factor(letters)
ls()
rm(letters)
price <- c(100,200,NULL)
price
length(price)
is.na(price)
x <- c(1,2,3,4)
x
y <- list(1,2,3,4)
y
my.list <- list(name=c("Robert", "Emma"), age = c (65, 54), retired = c(TRUE, FALSE))
my.list
my.list$age
my.list$age[1]
my.list$name[2]
B = matrix(c(2,4,3,5,7), nrow = 3, ncol = 2)
B = matrix(c(2,4,3,1,5,7), nrow = 3, ncol = 2)
B
data(iris)
data()
iris
names(iris)
colnames(iris)
rownames(iris)
dim(iris)
nrow(iris)
ncol(iris)
head(iris)
tail(iris)
str(iris)
?iris
class(iris)
attach(iris)
detach(iris)
ls(iris)
attach(iris)
ls(iris)
head(iris$Species)
detach(iris)
ls(iris)
head(iris$Species)
attach(iris)
head(Species)
getwd()
dat <- 1:10
names(x)
getwd()
c<- 21:30
a<-1:10
b<-11:20
d<- data.frame(b,c,a)
d[6,3]
d[8,2]
customer_details <- data.frame(Name=c("Ramya", "Ali", "Jim"),
Age=c(25,30,35),
Telephone_bill_rs=c(600,400,00),
Month=c("Aug","Aug","Aug"))
customer_details
class(customer_details)
getwd()
read.csv("Book1.csv")
data <- read.csv("Book1.csv")
str(data)
library(ggplot2)
myplot <- ggplot(data = data, aes(COMPANY, ))
myplot <- ggplot(data = data, aes(COMPANY, MONTHS, ))
myplot
install.packages("quantmod")
library(quantmod)
getSymbols("SPY", src = "google")
install.packages("quantmod")
library(quantmod)
getSymbols("SPY", src = "google")
install.packages("quantmod")
library(quantmod)
getSymbols("SPY", src = "google")
getSymbols("NIFTY", src = "YAHOO")
getSymbols("NIFTY", src = "yahoo")
getSymbols("NIFTY", src = "msn")
getSymbols("NIFTY", src = "google")
getSymbols("NSE", src = "google")
View(NSE)
View(NSE)
getSymbols("NSE:NIFTY", src = "google")
View(SPY)
View(SPY)
getSymbols("INFY", src = "google")
View(INFY)
View(INFY)
getSymbols("INFY", src = "moneycontrol")
getSymbols("INFY", src = "money control")
getSymbols("INFY", src = "yahoo")
View(INFY)
View(INFY)
getSymbols("INFY.NS", src = "yahoo")
View(INFY.NS)
View(INFY.NS)
getSymbols("INFY.NS", src = "yahoo", na.approx())
getSymbols("INFY.NS", src = "yahoo", na.approx(INFY.NS))
getSymbols("AXISBANK.NS", src = "yahoo")
head(AXISBANK.NS)
na.approx(AXISBANK.NS)
AXISBANK.NS
head(AXISBANK.NS)
tail(AXISBANK.NS)
basket_symbols <- c('HINDALCO.NS', "INFY.NS", 'AXISBANK.NS')
getSymbols(basket_symbols, src = 'yahoo')
na.approx(HINDALCO.NS, INFY.NS, AXISBANK.NS)
na.approx("HINDALCO.NS", "INFY.NS", "AXISBANK.NS")
na.approx(HINDALCO.NS)
HINDALCO.NS <-na.approx(HINDALCO.NS)
INFY.NS <- na.approx(INFY.NS)
AXISBANK.NS <- na.approx(AXISBANK.NS)
head(HINDALCO.NS)
head(INFY.NS)
head(AXISBANK.NS)
tail(AXISBANK.NS)
tail(HINDALCO.NS)
tail(INFY.NS)
tail(AXISBANK.NS)
nifty <- data.frame(as.xts(merge(AXISBANK.NS,INFY.NS,HINDALCO.NS)))
head(nifty,2)
tail(nifty)
tail(nifty,1)
View(INFY)
View(INFY.NS)
basket_symbols <- c('HINDALCO.NS', "INFY.NS", 'AXISBANK.NS')
getSymbols(basket_symbols, src = 'yahoo')
HINDALCO.NS <-na.approx(HINDALCO.NS)
INFY.NS <- na.approx(INFY.NS)
AXISBANK.NS <- na.approx(AXISBANK.NS)
head(HINDALCO.NS)
head(INFY.NS)
head(AXISBANK.NS)
tail(HINDALCO.NS)
tail(INFY.NS)
tail(AXISBANK.NS)
nifty <- data.frame(as.xts(merge(AXISBANK.NS,INFY.NS,HINDALCO.NS)))
head(nifty,2)
tail(nifty,1)
install.packages("TTR")
install.packages("TTR")
chartSeries(INFY.NS, theme = "white")
library(TTR)
chartSeries(INFY.NS, theme = "white")
dim(INFY.NS)
plot(INFY.NS)
names(INFY.NS)
lineChart(INFY.NS, line.type = 'h', theme = 'white', TA=NULL)
lineChart(INFY.NS, line.type = 'h', theme = 'white', TA=NULL)
?lineChart
plot(INFY.NS, theme = "white")
lineChart(INFY.NS, theme = "white")
install.packages("quantmod")
library(quantmod)
basket_symbols <- c('HINDALCO.NS', "INFY.NS", 'AXISBANK.NS')
getSymbols(basket_symbols, src = 'yahoo')
HINDALCO.NS <-na.approx(HINDALCO.NS)
INFY.NS <- na.approx(INFY.NS)
AXISBANK.NS <- na.approx(AXISBANK.NS)
head(HINDALCO.NS)
head(INFY.NS)
head(AXISBANK.NS)
nifty <- data.frame(as.xts(merge(AXISBANK.NS,INFY.NS,HINDALCO.NS)))
head(nifty,2)
tail(nifty,1)
dim(INFY.NS)
plot(INFY.NS)
names(INFY.NS)
lineChart(INFY.NS, line.type = 'h', theme = 'white', TA=NULL)
?lineChart
lineChart(INFY.NS, line.type = 'h', theme = 'white', TA=NULL)
lineChart(INFY.NS, line.type = 'h', theme = 'white', TA=NULL)
lineChart(INFY.NS, line.type = 'h', theme = 'white', TA=NULL)
lineChart(INFY.NS, line.type = 'h', theme = 'white', TA=NULL)
lineChart(INFY.NS, line.type = 'h', theme = 'white')
barChart(INFY.NS, bar.type = 'hlc', TA=NULL)
barChart(INFY.NS, bar.type = 'hlc', TA=NULL)
barChart(INFY.NS, bar.type = 'hlc', TA=NULL)
barChart(INFY.NS, bar.type = 'hlc')
candleChart(INFY.NS, TA=NULL, subset = '2017')
candleChart(INFY.NS, TA=NULL, subset = '2017-06')
candleChart(INFY.NS, TA=NULL, subset = '2017-06::2017-07')
candleChart(INFY.NS, TA=NULL, subset = '2017-06::2017-07-06')
candleChart(INFY.NS, TA=NULL, subset = '2017-07-06')
candleChart(INFY.NS, TA=NULL, subset = '2017-07-05')
candleChart(INFY.NS, TA=NULL, subset = '2017-07')
candleChart(INFY.NS, TA=NULL, theme = 'white', subset = '2017-07')
candleChart(INFY.NS,
theme= chartTheme('white', up.col='yellow', dn.col='darked'),
TA=NULL, subset = '2017-06::2017-07-06')
candleChart(INFY.NS,
theme= chartTheme('white', up.col='yellow', dn.col='darked'),
TA=NULL, subset = '2017-06::2017-07')
candleChart(INFY.NS,
theme= chartTheme('white', up.col='yellow', dn.col='darkred'),
TA=NULL, subset = '2017-06::2017-07')
candleChart(INFY.NS,
theme= chartTheme('white', up.col='blue', dn.col='darkred'),
TA=NULL, subset = '2017-06::2017-07')
chartSeries(INFY.NS, type = c("auto", "candlesticks", "matchsticks", "bars", "line"))
chartSeries(INFY.NS, type = c("matchsticks"),TA=NULL, subset = '2017-06::2017-07')
chartSeries(INFY.NS, type = c("candlesticks"),TA=NULL, subset = '2017-06::2017-07')
install.packages("TTR")
install.packages("TTR")
library(TTR)
lineChart(INFY.NS, theme = "white")
addSMA(n=200)
lineChart(INFY.NS, theme = "white" subset='2017-06::2017-07')
lineChart(INFY.NS, theme = "white" subset ='2017-06::2017-07')
addROC(n=200)
lineChart(INFY.NS, theme = "white")
addSMA(n=200)
addROC(n=200)
addROC(n=100)
library(TTR)
lineChart(INFY.NS, theme = "white")
addSMA(n=200)
addROC(n=100)
addROC(n=100, na.rm=T)
addROC(n=100, na.rm=TRUE)
addROC(n=200)
addSMA(n=20)
addROC(n=20)
addROC(n=2)
addSMA(n=2)
getwd()
setwd('G:\\UDEMY\\SDS\\Machine_Learning\\Data_Preprocessing')
#Importing the data set
dataset <- read.csv('Data.csv')
dataset
#Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(X) mean(X, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(X) mean(X, na.rm = TRUE)),
dataset$Salary)
summary(dataset)
str(dataset)
dataset$Country <- factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased <- factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0,1))
library(caTools)
getwd()
setwd('G:\\UDEMY\\SDS\\Machine_Learning\\Data_Preprocessing')
#Importing the data set
dataset <- read.csv('Data.csv')
dataset
#Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(X) mean(X, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(X) mean(X, na.rm = TRUE)),
dataset$Salary)
summary(dataset)
str(dataset)
#Encoding categorical data
dataset$Country <- factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased <- factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0,1))
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(test_set)
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
getwd()
setwd("G:/UDEMY/SDS/Machine_Learning/Simple_Linear_Regression")
getwd()
getwd()
dataset <- read.csv('Salary_Data.csv')
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
?regressor
summary(regressor)
??regressor
lm(formula
summary(regressor)
summary(regressor)
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
y_pred = predict(regressor, newdata = test_set)
y_pred
y_pred = predict(regressor, newdata =training_set)
y_pred
library(ggplot2)
y_pred = predict(regressor, newdata = test_set)
y_pred
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y=training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue')+
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y=training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue')+
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y=test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue')+
ggtitle('Salary vs Experience (Test set)') +
xlab('Years of experience') +
ylab('Salary')
getwd()
setwd("G:/UDEMY/SDS/Machine_Learning/Multiple_Linear_Regression")
getwd()
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
View(dataset)
View(dataset)
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1,2,3))
str(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
regressor = lm(formula = Profit ~ . ,
data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
regressor = lm(formula =  Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
regressor = lm(formula =  Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula =  Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula =  Profit ~ R.D.Spend  + Marketing.Spend,
data = dataset)
summary(regressor)
summary(regressor)
regressor = lm(formula =  Profit ~ R.D.Spend  ,
data = dataset)
summary(regressor)
